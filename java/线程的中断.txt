
public class InterruptThread {
    //中断一个线程，但是线程没有处理中断
    public static void test1(){
        Thread t=new Thread(new Runnable() {
            @Override
            public void run() {
                while (true){

                }
            }
        });
        t.start();
        t.interrupt();
    }
    //
    public  static  void test2() throws InterruptedException {
        Thread t=new Thread(new Runnable() {
            @Override
            public void run() {//线程运行状态下处理中断标志
                for(int i=0;i<50;i++){
                    System.out.println(i+""+Thread.currentThread().isInterrupted());
                }
//              while (!Thread.currentThread().isInterrupted()){
                while (!Thread.interrupted()){
                  System.out.println(Thread.currentThread().getName());
              }
            }
        });
        t.start();//t线程中的中断标志位=false
        t.interrupt();//t线程中的中断标志位=true
    }
    public  static  void test3() throws InterruptedException {
        Thread t=new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    System.out.println(Thread.currentThread().isInterrupted());//true
                    //线程处于调用wait（）/join（）/sleep()阻塞的时候，如果把当前线程中断，会直接抛出一个异常
                    //阻塞状态时，通过捕获及处理异常，来处理线程的中断逻辑
                    //抛出异常以后线程的标志位被重置
                    Thread.sleep(9999999);
                    System.out.println(Thread.currentThread().getName());
                } catch (InterruptedException e) {
                    e.printStackTrace();
                    System.out.println(Thread.currentThread().isInterrupted());//false
                }

            }
        });
        t.start();//t线程中的中断标志位=false
        t.interrupt();//t线程中的中断标志位=true
    }
    public  static  void test4() throws InterruptedException {
        Thread t=new Thread(new Runnable() {
            @Override
            public void run() {
               for (int i=0;i<10;i++){
                   System.out.println(Thread.currentThread().isInterrupted());
                  // System.out.println(Thread.interrupted());//返回中断标志位，并重置标志位
               }

            }
        });
        t.start();//t线程中的中断标志位=false
        t.interrupt();//t线程中的中断标志位=true
    }
    private  static volatile boolean IS_INTERRUPTDE;
    //使用自定义的中断标志位
    public static  void test5(){
        Thread t=new Thread(new Runnable() {
            @Override
            public void run() {
                //自定义的标志位 能满足线程处于运行态的中断操作
//                while (!IS_INTERRUPTDE){
//                    System.out.println(Thread.currentThread().getName());
//                }
                //自定义的标志位满足不了西安城处于阻塞状态时，中断操作
                try {
                    Thread.sleep(99999);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        t.start();
        IS_INTERRUPTDE=true;
    }
    public static void main(String[] args) throws InterruptedException {
        //test1();
        //test2();
        // test3();
        // test4();
        test5();
    }
}
