
public class MyBlockQueue<E> {

    private Object[] item;

    private int takeIndex;//弹出元素的索引位置
    private int putIndex;//添加元素的索引位置
    private int size;//有效容量

    public MyBlockQueue(int capacity){
        item=new Object[capacity];

    }

    public synchronized void  put(E e) throws InterruptedException {
       while (size==item.length){//达到上限需要等待
          wait();
       }
        putIndex=(putIndex+1)%item.length;//存放元素的索引++，需要满足循环队列索引》数组长度的情况
       item[putIndex]=e;//存放元素
        size++;
        notifyAll();
    }

    public synchronized E take() throws InterruptedException {
        while (size==0){//达到下限，需要等待
            wait();
        }
        takeIndex=(takeIndex+1)%item.length;
        size--;
        notifyAll();
        return (E) item[takeIndex];
    }


    public static void main(String[] args) {
      MyBlockQueue<Integer> queue=new MyBlockQueue<>(100);
       for(int i=0;i<5;i++){
           final int k=i;
       new Thread(new Runnable() {
           @Override
           public void run() {
               try {
                   for(int j=0;j<100;j++){
                       queue.put(k*100+j);
                   }
               } catch (InterruptedException e) {
                   e.printStackTrace();
               }
           }
       }).start();
       }
       while (true){
           int num= 0;
           try {
               num = queue.take();
           } catch (InterruptedException e) {
               e.printStackTrace();
           }
           System.out.println(num);
       }
    }
}
