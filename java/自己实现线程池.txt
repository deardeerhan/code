package lesson7;

import lesson6.MyBlockQueue;

public class MyThreadPool {

    private MyBlockQueue<Runnable> queue;
    public MyThreadPool(int size,int capacity){

        queue=new MyBlockQueue<>(capacity);
        //创建正式员工
        for (int i=0;i<size;i++){
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        while (true){//正式员工一直运行
                            Runnable task=queue.take();
                            //从仓库取包裹：
                            // 1.成功取出包裹（任务），方法返回
                            //2.仓库中取不出包裹（其他员工正在取阻塞在synchronized代码行；没有包裹了）
                            task.run();
                            //正式员工送快递（实例方法的调用来执行任务）
                        }
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                }
            }).start();
        }
    }
    public  void execute(Runnable task){
        try {
            queue.put(task);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    public static void main(String[] args) {
        MyThreadPool pool=new MyThreadPool(5,100);
        pool.execute(new Runnable() {
            @Override
            public void run() {
                System.out.println("A");
            }
        });
        pool.execute(new Runnable() {
            @Override
            public void run() {
                System.out.println("B");
            }
        });
        pool.execute(new Runnable() {
            @Override
            public void run() {
                System.out.println("C");
            }
        });
    }
}
