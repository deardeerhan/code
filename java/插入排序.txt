 //插入排序
    public static void insertSort(int[] array){
        for(int i=1;i<array.length;i++){
            //找待插入元素再前面已经排好序部分的位置
            int key=array[i];
            int end=i-1;
            //待插入元素为最小元素的情况
            while (end>=0&&key<array[end]){
                array[end+1]=array[end];
                end--;
            }
            array[end+1]=key;
        }

    }
    //用二分查找优化插入排序
    public static void insertSort2(int[] arr){
        int left,right,mid = 0,i,j;
        for( i = 1; i<arr.length ; i++ ){
            int temp = arr[i];
            left = 0;
            right = i-1;
            while(left<=right){
                mid = (left+right)>>1;
                if(arr[mid]>temp)
                    right = mid - 1;
                else
                    left = mid + 1;
            }
            for( j = i-1 ; j >= left ; j-- ){
                arr[j+1] = arr[j];
            }
            arr[left] = temp;
        }
    }
//希尔排序
    public static void shellSort(int[] array) {
        int gap=array.length;
        while (gap>1) {
        gap=gap/3+1;
            for (int i = gap; i < array.length; i++) {
                int key = array[i];
                int end = i - gap;
                while (end>=0&&key<array[end]){
                    array[end + gap] = array[end];
                    end = end - gap;
                }
                array[end + gap] = key;
            }
            //gap--;
        }
    }